const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

function generateSecureKey(length = 32) {
  return crypto.randomBytes(length).toString('hex');
}

function initDeployment() {
  console.log('üöÄ Initialisation du d√©ploiement...');
  
  // G√©n√©rer les cl√©s de s√©curit√©
  const jwtSecret = generateSecureKey();
  const apiKey = generateSecureKey();

  // Cr√©er le fichier .env.production s'il n'existe pas
  const envContent = `# Configuration g√©n√©rale
NODE_ENV=production
JWT_SECRET=${jwtSecret}
API_KEY=${apiKey}

# Configuration du serveur
PORT=3000
HTTPS_PORT=443
FORCE_SSL=false

# Configuration des origines CORS
CORS_ORIGIN=https://votre-domaine.com

# Configuration SSL (pour l'auto-h√©bergement)
SSL_KEY_PATH=./ssl/private.key
SSL_CERT_PATH=./ssl/certificate.crt
SSL_CA_PATH=./ssl/ca_bundle.crt

# Configuration de la base de donn√©es
DB_PATH=./database.db
`;

  try {
    fs.writeFileSync('.env.production', envContent);
    console.log('‚úÖ Fichier .env.production cr√©√© avec succ√®s');
    
    // Cr√©er le dossier ssl s'il n'existe pas
    if (!fs.existsSync('ssl')) {
      fs.mkdirSync('ssl');
      console.log('‚úÖ Dossier SSL cr√©√©');
    }
    
    console.log('\nüìù Configuration termin√©e !');
    console.log('\nProchaines √©tapes :');
    console.log('1. Pour Railway.app :');
    console.log('   - Ex√©cutez : npm run deploy:railway');
    console.log('\n2. Pour l\'auto-h√©bergement :');
    console.log('   - Modifiez FORCE_SSL=true dans .env.production');
    console.log('   - Ex√©cutez : npm run deploy:setup-ssl');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    process.exit(1);
  }
}

initDeployment();
